setwd("D:/GitHub/SuperGauss/Toeplitz")
require(Rcpp)
require(devtools)
compileAttributes() # regenerates Rcpp interface (i.e., RcppExports)
#document()
install() #
require(Toeplitz)
require(numDeriv)
tr <- function(X) sum(diag(X)) # matrix trace
n <- 6
acf <- exp(-(1:n)^2/102)*102
T1 <- new(Toeplitz, n)
T1$acfInput(acf)
acf2 <- rnorm(n)
acf3 <- rnorm(n)
traceDerv.R <- function(acf, acf2, acf3, debug = F){
if(debug) browser()
T1 <- toeplitz(acf)
T2 <- toeplitz(acf2)
T3 <- toeplitz(acf3)
n <- length(acf)
sT1 <- solve(T1)
phi <- matrix(sT1[,1], n, 1)
phi2 <- - sT1 %*% T2 %*% phi
phi <- as.vector(phi)
phi2 <- as.vector(phi2)
L1.phi2 <- toeplitz(phi2)
L1.phi2[upper.tri(L1.phi2)] <- 0
L1.phi <- toeplitz(phi)
L1.phi[upper.tri(L1.phi)] <- 0
L2.phi2 <- toeplitz(c(0, rev(phi2[-1])))
L2.phi2[upper.tri(L2.phi2)] <- 0
L2.phi <- toeplitz(c(0, rev(phi[-1])))
L2.phi[upper.tri(L2.phi)] <- 0
trace <- - phi2[1] * tr(sT1 %*% T3)
trace <- trace + 2 * tr(L1.phi2 %*% t(L1.phi) %*% T3)
# knowing that T3 = 1/acf3[1] * (L3 L3' - L4 L4')
L3 <- toeplitz(acf3)
L3[upper.tri(L3)] <- 0
L4 <- toeplitz(c(0, acf3[-1]))
L4[upper.tri(L4)] <- 0
trace <- trace - 2 * tr(L2.phi2 %*% t(L2.phi) %*% T3)
-trace / phi[1]
}
T1$tracederv(acf2, acf3) - traceDerv.R(acf, acf2, acf3)
acf.fun0 <- function(theta, lambda, N){
acf <- 1:N
acf <- -(acf / theta)^lambda
exp(acf)
}
# d.acf = lambda * exp(-(i/theta)^lambda) * (i/theta)^lambda / theta
acf.fun1 <- function(theta, lambda, N){
acf <- 1:N
acf <- (acf / theta)^lambda
acf <- lambda * exp(-acf) * acf / theta
acf
}
range(grad(func = acf.fun0, x = 2, lambda = 2, N = 1) - acf.fun1(2, 2, 1))
# good
N <- 46
theta <- 2
lambda <- 1
acf <- acf.fun0(theta, lambda, N)
acf1 <- acf.fun1(theta, lambda, N)
acf2  <- rnorm(N)
T1 <- toeplitz(acf)
sT1 <- solve(T1)
T2 <- toeplitz(acf1)
T3 <- toeplitz(acf2)
traceDerv.R(acf, acf1, acf2) - tr(sT1 %*% T2 %*% sT1 %*% T3)
rm(T1)
